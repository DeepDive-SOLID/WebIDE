### 컨테이너 관리 API 테스트
### Team 기반 컨테이너 시스템 (ROOT/USER + 세분화된 권한 시스템)

### ========== 컨테이너 생성 테스트 ==========

### 1. 컨테이너 생성 (PRIVATE) - 멤버 초대 포함
POST http://localhost:8080/api/containers
Content-Type: application/json
memberId: test001

{
  "containerName": "My First Project",
  "containerContent": "This is my first container project",
  "visibility": "PRIVATE",
  "invitedMemberIds": ["test002", "test003"]
}

### 2. 컨테이너 생성 (PUBLIC) - 초대 없음
POST http://localhost:8080/api/containers
Content-Type: application/json
memberId: test002

{
  "containerName": "Public Demo",
  "containerContent": "This is a public demo container",
  "visibility": "PUBLIC",
  "invitedMemberIds": []
}

### ========== 컨테이너 조회 테스트 ==========

### 3. 내 컨테이너 목록 조회
GET http://localhost:8080/api/containers/my
memberId: test001

### 4. 컨테이너 상세 조회
GET http://localhost:8080/api/containers/1
memberId: test001

### 5. 공유된 컨테이너 목록 조회
GET http://localhost:8080/api/containers/shared
memberId: test002

### 6. 공개 컨테이너 목록 조회
GET http://localhost:8080/api/containers/public

### 7. 모든 접근 가능한 컨테이너 목록 조회
GET http://localhost:8080/api/containers
memberId: test001

### ========== 컨테이너 수정 테스트 ==========

### 8. 컨테이너 수정 (소유자)
PUT http://localhost:8080/api/containers/1
Content-Type: application/json
memberId: test001

{
  "containerName": "Updated Project Name",
  "containerContent": "Updated description",
  "visibility": "PUBLIC"
}

### 9. 컨테이너 내용만 수정 (WRITE 권한 멤버)
PUT http://localhost:8080/api/containers/1
Content-Type: application/json
memberId: test002

{
  "containerContent": "Updated by member with WRITE permission"
}

### ========== 멤버 관리 테스트 ==========

### 10. 컨테이너 멤버 목록 조회
GET http://localhost:8080/api/containers/1/members
memberId: test001

### 11. 멤버 초대 - ROOT 권한 부여
POST http://localhost:8080/api/containers/1/members
Content-Type: application/json
memberId: test001

{
  "memberId": "test004",
  "authority": "ROOT"
}

### 12. 멤버 초대 - ADMIN 권한 부여
POST http://localhost:8080/api/containers/1/members
Content-Type: application/json
memberId: test001

{
  "memberId": "test005",
  "authority": "ADMIN"
}

### 13. 멤버 초대 - INVITE 권한 부여
POST http://localhost:8080/api/containers/1/members
Content-Type: application/json
memberId: test001

{
  "memberId": "admin001",
  "authority": "INVITE"
}

### 14. INVITE 권한자가 멤버 초대 - WRITE 권한 부여
POST http://localhost:8080/api/containers/1/members
Content-Type: application/json
memberId: admin001

{
  "memberId": "test001",
  "authority": "WRITE"
}

### 15. 멤버 초대 - USER 권한 부여 (기존 권한)
POST http://localhost:8080/api/containers/1/members
Content-Type: application/json
memberId: test001

{
  "memberId": "test002",
  "authority": "USER"
}

### 16. 멤버 초대 - READ 권한 부여 (읽기 전용)
POST http://localhost:8080/api/containers/1/members
Content-Type: application/json
memberId: test001

{
  "memberId": "test003",
  "authority": "READ"
}

### ========== 권한 변경 테스트 ==========

### 17. 멤버 권한 변경 - USER를 WRITE로
PUT http://localhost:8080/api/containers/1/members/test003/authority?newAuthority=WRITE
memberId: test001

### 18. 멤버 권한 변경 - WRITE를 INVITE로
PUT http://localhost:8080/api/containers/1/members/test002/authority?newAuthority=INVITE
memberId: test001

### 19. 멤버 권한 변경 - INVITE를 ADMIN으로
PUT http://localhost:8080/api/containers/1/members/test002/authority?newAuthority=ADMIN
memberId: test001

### 20. 멤버 권한 변경 - READ를 ROOT로
PUT http://localhost:8080/api/containers/1/members/newuser003/authority?newAuthority=ROOT
memberId: test001

### ========== 권한별 기능 테스트 ==========

### 21. READ 권한자의 수정 시도 (실패 예상)
PUT http://localhost:8080/api/containers/1
Content-Type: application/json
memberId: newuser003

{
  "containerContent": "This should fail"
}

### 22. WRITE 권한자의 설정 변경 시도 (실패 예상)
PUT http://localhost:8080/api/containers/1
Content-Type: application/json
memberId: test002

{
  "visibility": "PRIVATE"
}

### 23. INVITE 권한자의 멤버 제거
DELETE http://localhost:8080/api/containers/1/members/newuser002
memberId: admin001

### 24. USER 권한자의 멤버 초대 시도 (실패 예상)
POST http://localhost:8080/api/containers/1/members
Content-Type: application/json
memberId: test003

{
  "memberId": "failuser",
  "authority": "READ"
}

### ========== 활동 시간 및 자동 탈퇴 테스트 ==========

### 25. 멤버 활동 시간 업데이트
PUT http://localhost:8080/api/containers/1/members/me/activity
memberId: test001

### 26. 멤버 활동 시간 업데이트 (다른 멤버)
PUT http://localhost:8080/api/containers/1/members/me/activity
memberId: test002

### ========== 멤버 제거 및 탈퇴 테스트 ==========

### 27. ROOT 권한자가 멤버 제거
DELETE http://localhost:8080/api/containers/1/members/test003
memberId: test001

### 28. ADMIN 권한자가 멤버 제거
DELETE http://localhost:8080/api/containers/1/members/newuser001
memberId: test005

### 29. 일반 멤버의 컨테이너 탈퇴
DELETE http://localhost:8080/api/containers/1/members/me
memberId: test002

### 30. 소유자의 컨테이너 탈퇴 시도 (실패 예상)
DELETE http://localhost:8080/api/containers/1/members/me
memberId: test001

### ========== 컨테이너 삭제 테스트 ==========

### 31. 컨테이너 삭제 (ROOT 권한 소유자)
DELETE http://localhost:8080/api/containers/1
memberId: test001

### 32. 컨테이너 삭제 (ADMIN 권한 멤버)
DELETE http://localhost:8080/api/containers/2
memberId: test005

### ========== 오류 케이스 테스트 ==========

### 33. 존재하지 않는 멤버 초대
POST http://localhost:8080/api/containers/1/members
Content-Type: application/json
memberId: test001

{
  "memberId": "notexist",
  "authority": "READ"
}

### 34. 이미 멤버인 사용자 재초대
POST http://localhost:8080/api/containers/1/members
Content-Type: application/json
memberId: test001

{
  "memberId": "test002",
  "authority": "WRITE"
}

### 35. 권한 없는 사용자의 비공개 컨테이너 접근
GET http://localhost:8080/api/containers/1
memberId: outsider001

### 36. 잘못된 권한 값으로 초대
POST http://localhost:8080/api/containers/1/members
Content-Type: application/json
memberId: test001

{
  "memberId": "test006",
  "authority": "INVALID_AUTH"
}